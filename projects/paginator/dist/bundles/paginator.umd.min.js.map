{"version":3,"sources":["ng://paginator/lib/paginator.service.ts","ng://paginator/lib/paginator.component.ts","ng://paginator/lib/paginator.module.ts"],"names":["PaginatorService","Injectable","args","providedIn","PaginatorComponent","EventEmitter","Object","defineProperty","prototype","this","_length","value","_pageSize","ngOnInit","getRangeLabel","pageIndex","pageSize","length","startIndex","Math","max","min","onSelect","e","console","log","hasPreviousPage","hasNextPage","numberOfPages","getNumberOfPages","ceil","nextPage","previousPageIndex","_emitPageEvent","previousPage","page","emit","_changePageSize","floor","Component","selector","template","Input","Output","NgxPaginatorModule","NgModule","imports","NgxDropdownModule","declarations","exports"],"mappings":"wUAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WA8CE,SAAAA,cAJiB,IAAIC,EAAAA,4BACT,SALZC,OAAAC,eAAcH,EAAAI,UAAA,SAAM,KAApB,WAAwB,OAAOC,KAAKC,aAC1B,SAAWC,GAAiBF,KAAKC,SAAWC,mCACtDL,OAAAC,eAAcH,EAAAI,UAAA,WAAQ,KAAtB,WAA0B,OAAOC,KAAKG,eAC5B,SAAaD,GAAiBF,KAAKG,WAAaD,mCAO1DP,EAAAI,UAAAK,SAAA,aAEAP,OAAAC,eAAIH,EAAAI,UAAA,QAAK,KAAT,WAAa,OAAOC,KAAKK,cAAcL,KAAKM,UAAWN,KAAKG,UAAWH,KAAKC,0CAC5EN,EAAAI,UAAAM,cAAA,SAAeC,EAAmBC,EAAkBC,GAClD,GAAe,IAAXA,GAA6B,IAAbD,EAAkB,MAAO,QAAQC,EAIrD,IAAMC,EAAaH,EAAYC,EAO/B,OAAUE,EAAa,EAAC,OAJPA,GALjBD,EAASE,KAAKC,IAAIH,EAAQ,IAMtBE,KAAKE,IAAIH,EAAaF,EAAUC,GAChCC,EAAaF,GAEqB,OAAOC,GAE/Cb,EAAAI,UAAAc,SAAA,SAASC,GAAIC,QAAQC,IAAIF,IAEvBnB,EAAAI,UAAAkB,gBAAA,WACE,OAAyB,GAAlBjB,KAAKM,WAAoC,IAAlBN,KAAKO,UAGrCZ,EAAAI,UAAAmB,YAAA,WACE,IAAMC,EAAgBnB,KAAKoB,mBAC3B,OAAOpB,KAAKM,UAAYa,GAAmC,IAAlBnB,KAAKO,UAGhDZ,EAAAI,UAAAqB,iBAAA,WACE,OAAOV,KAAKW,KAAKrB,KAAKQ,OAASR,KAAKO,UAAY,GAGpDZ,EAAAI,UAAAuB,SAAA,WACE,GAAKtB,KAAKkB,cAAV,CAEA,IAAMK,EAAoBvB,KAAKM,UAC/BN,KAAKM,YACLN,KAAKwB,eAAeD,KAItB5B,EAAAI,UAAA0B,aAAA,WACE,GAAKzB,KAAKiB,kBAAV,CAEA,IAAMM,EAAoBvB,KAAKM,UAC/BN,KAAKM,YACLN,KAAKwB,eAAeD,KAEd5B,EAAAI,UAAAyB,wBAAeD,GACrBvB,KAAK0B,KAAKC,KAAK,CACbJ,kBAAiBA,EACjBjB,UAAWN,KAAKM,UAChBC,SAAUP,KAAKO,SACfC,OAAQR,KAAKQ,UAGjBb,EAAAI,UAAA6B,gBAAA,SAAgBrB,GAGd,IAAME,EAAaT,KAAKM,UAAYN,KAAKO,SACnCgB,EAAoBvB,KAAKM,UAE/BN,KAAKM,UAAYI,KAAKmB,MAAMpB,EAAaF,IAAa,EACtDP,KAAKO,SAAWA,EAChBP,KAAKwB,eAAeD,wBA9GvBO,EAAAA,UAASrC,KAAA,CAAC,CACTsC,SAAU,uBACVC,SAAU,ypFAkCTC,EAAAA,wBAEAA,EAAAA,oBAEAC,EAAAA,YA1CH,GCAAC,EAAA,oDAKCC,EAAAA,SAAQ3C,KAAA,CAAC,CACR4C,QAAS,CACPC,EAAAA,mBAEFC,aAAc,CAAC5C,GACf6C,QAAS,CAAC7C,SAVZ","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaginatorService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-simple-paginator',\n  template: `\n  <div class=\"ngx-paginator-container\">\n      <div class=\"ngx-paginator-page-size\">\n        <div class=\"ngx-paginator-page-size-label\"> Items per page:\n        </div>\n      </div>\n      <div class=\"ngx-paginator-range-actions\">\n        <div class=\"ngx-paginator-range-label\"> {{label}}</div>\n        <div class=\"ngx-dropdown-wrapper\" style=\"width: 2rem; font-size: 12px;\">\n        <ngx-simple-dropdown [positinY]=\"'above'\">\n          <p  dropdownToggle>{{pageSize}}</p>\n          <ul *dropdownMenu class=\"ngx-dropdown-menu\">\n            <button (click)=\"_changePageSize(2)\">2</button>\n            <button (click)=\"_changePageSize(25)\">25</button>\n            <button (click)=\"_changePageSize(100)\">100</button>\n          </ul>\n        </ngx-simple-dropdown>\n      </div>\n        <div class=\"ngx-paginator-range-actions-btns\">\n         <button [disabled]=\"!hasPreviousPage()\" (click)=\"previousPage()\">\n          <svg class=\"ngx-paginator-icon left\" focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\" fill=\"rgba(0, 0, 0, 0.54)\"></path></svg>\n         </button>\n         <button [disabled]=\"!hasNextPage()\" (click)=\"nextPage()\">\n          <svg class=\"ngx-paginator-icon right\" focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\" fill=\"rgba(0, 0, 0, 0.54)\"></path></svg>\n         </button>\n        </div>\n     </div>\n  </div>\n  `,\n  styleUrls: ['./paginator.component.scss']\n})\nexport class PaginatorComponent implements OnInit {\n  @Input()  get length() {return this._length; }\n            set length(value: number) { this._length = +value ; }\n  @Input()  get pageSize() {return this._pageSize; }\n            set pageSize(value: number) { this._pageSize = +value; }\n  @Output() page = new EventEmitter();\n  pageIndex = 0;\n  private _length: number;\n  private _pageSize: number;\n  constructor() { }\n\n  ngOnInit() {\n  }\n  get label() {return this.getRangeLabel(this.pageIndex, this._pageSize, this._length); }\n  getRangeLabel (pageIndex: number, pageSize: number, length: number)  {\n    if (length === 0 || pageSize === 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = pageIndex * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n  onSelect(e) {console.log(e)}\n    /** Whether there is a previous page. */\n    hasPreviousPage(): boolean {\n      return this.pageIndex >= 1 && this.pageSize !== 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage(): boolean {\n      const numberOfPages = this.getNumberOfPages();\n      return this.pageIndex < numberOfPages && this.pageSize !== 0;\n    }\n     /** Calculate the number of pages */\n    getNumberOfPages(): number {\n      return Math.ceil(this.length / this.pageSize) - 1;\n    }\n      /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n private  _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PaginatorComponent } from './paginator.component';\nimport { NgxDropdownModule } from 'ngx-simple-dropdown';\n// import { NgxDropdownModule } from 'projects/dropdown/src/lib/dropdown.module';\n\n@NgModule({\n  imports: [\n    NgxDropdownModule\n  ],\n  declarations: [PaginatorComponent],\n  exports: [PaginatorComponent]\n})\nexport class NgxPaginatorModule { }\n"]}